# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "dev" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'lalala'
        default: 'fii'
        required: true

env:
  MY_PROD_SECRET: ${{ secrets.LE_SECRET }}                   # set this to your preferred AWS region, e.g. us-west-1


permissions:
  contents: read

jobs:
  build-api:
    name: Build Backend app
    runs-on: ubuntu-latest

    steps:
    - name: build pims-api
      run: echo "Builing app"
    - name: store image
      run: echo "storing app image"

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Build Frontend app
      run: echo "bBuilding frontendapp"
    - name: TEST Secrety
      run: echo "storing frontend image"

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend]
    environment: dev

    steps:
    - name: Deploying frontend to dev
      run: echo "deploying to dev"
    - name: Deploting backend to dev
      run: echo "Deploying bakend to dev"

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    environment: test

    steps:
    - name: Deploying frontend to test
      run: echo "deploying to test"
    - name: Deploting backend to test
      run: echo "Deploying bakend to test"

  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: [deploy-test]
    environment: uat

    steps:
    - name: Deploying frontend to UAT
      run: echo "deploying to uat"
    - name: Deploting backend to uat
      run: echo "Deploying bakend to uat"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-uat]
    environment: production

    steps:
    - name: Deploying frontend to Production
      run: echo "deploying to prod"
    - name: Deploting backend to prod
      run: echo "Deploying bakend to prod"
